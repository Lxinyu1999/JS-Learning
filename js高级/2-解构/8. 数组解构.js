/** 数组解构用于快速提取并赋值数组中的每个元素
 *  虽然我们可以用形如 var1 = arr[0], var2 = arr[1]这样的方式提取，但是太麻烦了。直接用arr[i]，语义又不明确。
 *  于是引入了数组解构赋值：方法为 [变量名...] = arr
 */
// 这里的a,b,c不是数组元素，而是变量，分别对应右侧数组的1，2，3
const [a, b, c] = [1, 2, 3];
console.log(a, b, c); // 1,2,3

/* 重要应用：快速交换两个值 */
let x = 10;
let y = 20;
[x, y] = [y, x];
console.log(x, y); // 20,10

/* 如果超过范围，则赋值undefined；如果不够值，那会丢失后面的值 */
let [x1, x2, x3] = [1, 2];
console.log(x1, x2, x3); // 1 2 undefined

// 为了防止出现undefined，我们可以为变量设置默认值，类似于形参
let [x11, x22, x33 = 0] = [1, 2];
console.log(x11, x22, x33); // 1 2 0

let [y1, y2] = [1, 2, 3];
console.log(y1, y2); // 1 2
//一种常见做法是用扩展运算符表示不需要的后面的数组值，剩余部分z=数组
let [z1, z2, ...z] = [1, 2, 3, 4, 5, 6];
console.log(z1, z2, z); // 1 2 [ 3, 4, 5, 6 ]

// 也可以按需导入数组，跳过不需要的
let [d1, d2, , d4] = [1, 2, 3, 4];
console.log(d1, d2, d4); // 1 2 4

/* 数组解构也支持多维数组 */
let [a1, a2, a3] = [1, 2, [3, 4, 5]];
console.log(a1, a2, a3); // 1 2 [ 3, 4, 5 ]
